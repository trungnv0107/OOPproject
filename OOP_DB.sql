IF DB_ID('OOP_DB') IS NOT NULL
BEGIN
	USE master
	DROP DATABASE OOP_DB
END

GO
CREATE DATABASE OOP_DB

GO
USE OOP_DB

GO
CREATE TABLE ADDRESS(
	ADDRESS_ID		INT IDENTITY PRIMARY KEY NOT NULL,
	CITY			VARCHAR(20) NOT NULL,
	DISTRICT		VARCHAR(20) NOT NULL,
	SUB_DISTRICT	VARCHAR(20) NOT NULL,
	POSTAL_CODE		VARCHAR(20) NOT NULL,
	DELIVERY_FEE	MONEY,
)

GO
CREATE TABLE CUSTOMERS(
	CUSTOMER_ID	INT IDENTITY PRIMARY KEY NOT NULL,
	FULL_NAME	VARCHAR(50) NOT NULL,
	EMAIL		VARCHAR(50),
	PHONE_NUMBER	CHAR(10) NOT NULL,
	ADDRESS_ID	INT,

	CONSTRAINT FK_CUSTOMER FOREIGN KEY(ADDRESS_ID) REFERENCES ADDRESS(ADDRESS_ID) ,
)



GO
CREATE TABLE DISCOUNT(
	DISCOUNT_ID	INT IDENTITY PRIMARY KEY,
	TITLE	VARCHAR(50),
	TYPE	VARCHAR(20),
	DISCOUNT	DECIMAL(4,2),
	START_DATE	DATE,
	END_DATE	DATE,
)

GO
CREATE TABLE PRODUCT(
	PRODUCT_ID INT IDENTITY PRIMARY KEY,
	NAME	VARCHAR(50),
	DESCRIPTION	TEXT,
	PRICE	BIGINT,
	DISCOUNT_PRICE BIGINT,
	STOCK	INT NOT NULL,
	SOLD	INT NOT NULL,
	CREATE_DATE DATE,
	STATUS TEXT,
)
 GO
CREATE TABLE ORDERS(
	ORDER_ID	INT IDENTITY PRIMARY KEY,
	NAME	VARCHAR(50),
	PHONE_NUMBER	CHAR(10) NOT NULL,
	DETAIL_ADDRESS	VARCHAR(20),
	TOTAL BIGINT,
	ORDER_DATE	DATE,
	CUSTOMER_ID	INT,
	ADDRESS_ID	INT,
	DISCOUNT_ID	INT,
	--USERNAME	VARCHAR(50)	NOT NULL,
	--PASSWORD	VARCHAR(50) NOT NULL,

	CONSTRAINT FK_ORDER_CUSTOMER FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID),
	CONSTRAINT FK_ORDER_DETAIL_ADDRESS FOREIGN KEY(ADDRESS_ID) REFERENCES ADDRESS(ADDRESS_ID),
	CONSTRAINT FK_ORDER_DETAIL_DISCOUNT FOREIGN KEY(DISCOUNT_ID) REFERENCES DISCOUNT(DISCOUNT_ID),
	--CONSTRAINT FK_ORDER_CUSTOMER FOREIGN KEY(USERNAME) REFERENCES CUSTOMERS(USERNAME),
	--CONSTRAINT FK_ORDER_CUSTOMER FOREIGN KEY(PASSWORD) REFERENCES CUSTOMERS(PASSWORD)
)
GO
CREATE TABLE ORDER_DETAIL(
	CART_ID INT IDENTITY PRIMARY KEY,
	QUANTITY	INT DEFAULT 0,
	TOTAL	BIGINT,
	ORDER_ID	INT,
	PRODUCT_ID	INT,

	CONSTRAINT FK_ORDER_DETAIL_ORDER FOREIGN KEY(ORDER_ID) REFERENCES ORDERS(ORDER_ID),
	CONSTRAINT FK_ORDER_DETAIL_PRODUCT FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID)
)


---INSERT DATA
GO
INSERT INTO ADDRESS(CITY,DISTRICT,SUB_DISTRICT,POSTAL_CODE,DELIVERY_FEE)
VALUES
('HN','THANH TRI','TAN TRIEU','HN123',30000),
('HN','THANH XUAN','XX','HN122',30000),
('TB','YY','XX','TB124',35000),
('TH','HH','HL','TH125',40000)

GO
INSERT INTO CUSTOMERS(FULL_NAME, EMAIL, PHONE_NUMBER, ADDRESS_ID)
VALUES
('MAI ANH','MAIANH@GMAIL.COM','0123456789','1'),
('HOANG ANH','HOANGANH@GMAIL.COM','0123456789','2'),
('QUANG KHAI','KHAI@GMAIL.COM','0123456789','3'),
('NHAT ANH','NHATANH@GMAIL.COM','0123456789','4')

GO
INSERT INTO DISCOUNT(TITLE,TYPE,DISCOUNT,START_DATE,END_DATE)
VALUES
('XXXX','%',20,'2023-01-6','2023-02-6'),
('XXXX','%',10,'2023-08-7','2023-08-19'),
('XXXX','%',30,'2023-08-20','2023-09-06'),
('XXXX','%',15,'2023-09-07','2023-10-06')

GO
INSERT INTO PRODUCT(NAME,DESCRIPTION,PRICE,DISCOUNT_PRICE,STOCK,SOLD,CREATE_DATE,STATUS)
VALUES
('AO PHONG','SSSS',150000,20000,50,10,'2022-7-6','GOOD'),
('MU LUOI TRAI','SSSS',100000,10000,50,10,'2022-7-6','GOOD'),
('AO SO MI','SSSS',200000,20000,50,10,'2022-7-6','GOOD'),
('QUAN BO','SSSS',300000,20000,50,10,'2022-7-6','GOOD'),
('VONG CO BAC','SSSS',100000,20000,50,10,'2022-7-6','GOOD')


GO
CREATE VIEW TOTAL_SUM AS
SELECT ORDER_ID, SUM(TOTAL) AS TOTALSUM FROM ORDER_DETAIL GROUP BY ORDER_ID

GO
CREATE VIEW TOTALFINAL AS
SELECT  O.ORDER_ID,DELIVERY_FEE + TOTALSUM * (1-DISCOUNT/100) AS TOTALFINAL FROM TOTAL_SUM TS INNER JOIN ORDERS O ON TS.ORDER_ID = O.ORDER_ID INNER JOIN ADDRESS A ON O.ADDRESS_ID = A.ADDRESS_ID INNER JOIN DISCOUNT D ON O.DISCOUNT_ID = D.DISCOUNT_ID WHERE D.TYPE = '%'

GO
CREATE VIEW PRODUCT_AFTER_PRICE AS
SELECT PRODUCT.PRODUCT_ID, STOCK - QUANTITY AS STOCK_AFTER, SOLD + QUANTITY AS SOLD_AFTER FROM PRODUCT JOIN ORDER_DETAIL ON PRODUCT.PRODUCT_ID = ORDER_DETAIL.PRODUCT_ID

GO
select*from PRODUCT
SELECT * FROM CUSTOMERS
SELECT * from ADDRESS
SELECT * FROM DISCOUNT
select * from ORDERS
select * from ORDER_DETAIL
SELECT * FROM TOTAL_SUM
SELECT * FROM TOTALFINAL
SELECT * FROM PRODUCT_AFTER_PRICE
SELECT PRODUCT.PRODUCT_ID, STOCK - QUANTITY AS STOCK_AFTER, SOLD + QUANTITY AS SOLD_AFTER FROM PRODUCT JOIN ORDER_DETAIL ON PRODUCT.PRODUCT_ID = ORDER_DETAIL.PRODUCT_ID WHERE PRODUCT.PRODUCT_ID = ORDER_DETAIL.PRODUCT_ID



UPDATE PRODUCT SET SOLD = (SELECT SOLD_AFTER FROM PRODUCT_AFTER_PRICE PAP WHERE PAP.PRODUCT_ID = PRODUCT.PRODUCT_ID) WHERE PRODUCT.PRODUCT_ID = (SELECT PRODUCT_ID FROM ORDER_DETAIL)
SELECT * FROM ORDER_DETAIL INNER JOIN ORDERS ON ORDER_DETAIL.ORDER_ID=  ORDERS.ORDER_ID WHERE ORDERS.ORDER_ID = 1